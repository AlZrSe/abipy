

.. _sphx_glr_gallery_plot_qpbands_with_scissor.py:


GW with scissors operator
=========================

This example shows how to generate an energy-dependent scissors operator
by fitting the GW QPState corrections as function of the KS eigenvalues
We then use the scissors operator to correct the KS band structure
computed on a high symmetry k-path. Finally, the LDA and the QPState band
structure are plotted with matplotlib.




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /gallery/images/sphx_glr_plot_qpbands_with_scissor_001.png
            :scale: 47

    *

      .. image:: /gallery/images/sphx_glr_plot_qpbands_with_scissor_002.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    KS fermie 5.5984532787385985 --> QP fermie 5.40725126572 Delta(QP-KS)= -0.191202013015
    KS fermie 5.5984532787385985 --> QP fermie 5.40725126572 Delta(QP-KS)= -0.191202013015




|


.. code-block:: python

    import abipy.data as abidata
    from abipy.abilab import abiopen, ElectronBandsPlotter

    # Get the quasiparticle results from the SIGRES.nc database.
    #sigma_file = abiopen(abidata.ref_file("tgw1_9o_DS4_SIGRES.nc"))
    sigma_file = abiopen(abidata.ref_file("si_g0w0ppm_nband30_SIGRES.nc"))
    #sigma_file.plot_qps_vs_e0()
    qplist_spin = sigma_file.qplist_spin

    # Construct the scissors operator
    domains = [[-10, 6.1], [6.1, 18]]
    scissors = qplist_spin[0].build_scissors(domains, bounds=None)

    # Read the KS band energies computed on the k-path
    ks_bands = abiopen(abidata.ref_file("si_nscf_GSR.nc")).ebands

    # Read the KS band energies computed on the Monkhorst-Pack (MP) mesh
    # and compute the DOS with the Gaussian method
    ks_mpbands = abiopen(abidata.ref_file("si_scf_GSR.nc")).ebands
    ks_dos = ks_mpbands.get_edos()

    # Apply the scissors operator first on the KS band structure
    # along the k-path then on the energies computed with the MP mesh.
    qp_bands = ks_bands.apply_scissors(scissors)

    qp_mpbands = ks_mpbands.apply_scissors(scissors)

    # Compute the DOS with the modified QPState energies.
    qp_dos = qp_mpbands.get_edos()

    # Plot the LDA and the QPState band structure with matplotlib.
    plotter = ElectronBandsPlotter()

    plotter.add_ebands("LDA", ks_bands, dos=ks_dos)
    plotter.add_ebands("LDA+scissors(e)", qp_bands, dos=qp_dos)

    # By default, the two band energies are shifted wrt to *their* fermi level.
    # Use e=0 if you don't want to shift the eigenvalus
    # so that it's possible to visualize the QP corrections.
    plotter.combiplot(title="Silicon band structure")

    plotter.gridplot(title="Silicon band structure")
    sigma_file.close()

**Total running time of the script:** ( 0 minutes  3.063 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_qpbands_with_scissor.py <plot_qpbands_with_scissor.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_qpbands_with_scissor.ipynb <plot_qpbands_with_scissor.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
