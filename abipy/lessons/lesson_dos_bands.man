.TH The "" "" "calculation of the density of states and the bandstructure."
.SH Background
.PP
This lesson focuses on the calculation of the density of states (DOS)
and the electronic band structure withing the Kohn\-Sham (KS) formalism.
.PP
In contrast to the total energy and its derivatives, the energies of the
KS\-levels have no exact physical meaning, except for the highest
occupied state that actually would be the first ionization energy if the
functional would be exact.
So why would we even want to calculate the KS\-DOS and band structure?
In most cases the KS spectrum is qualitatively in agreement with
experiments.
Moreover in general we are able to make good predictions on trends.
.PP
In lesson_g0w0.py, we discuss a more elaborated and accurate approach
for the calculation of band energies and band gaps.
.SH The related abinit variables
.RS
.IP \[bu] 2
kptopt (negative values)
.IP \[bu] 2
kptbounds (if you want to specify the bounds of the k\-path)
.IP \[bu] 2
ndivsm
.RE
.PP
More info on the inputvariables and their use can be obtained using the
following function:
.RS
.IP
.nf
\f[C]
lesson.docvar("inputvariable")
\f[]
.fi
.RE
.PP
This will print the official abinit description of this inputvariable.
.SH The abipy flows in this lesson
.PP
The flow that we use in this lesson contains for the first time
dependencies.
This means that some tasks in the flow can only be started if an other
task is ready.
We will first perform one self\-consistent calculation to obtain a
proper density.
Using this density we calculate in two more steps the DOS and the
bandstructure.
For the DOS this not strictly necessary since the DOS will also be
calculated on a regular grid.
In general the density will be converged already before the DOS is
converged.
For large systems it may become nessesary to split.
For the bandstructure, we have a non\-uniform grid so we do need to fix
the density.
.SH The course of this lesson
.PP
Start ipython with matplotlib integration with the command:
.RS
.IP
.nf
\f[C]
ipython\ \-\-matplotlib
\f[]
.fi
.RE
.PP
Start this lesson by importing it in a new namespace:
.RS
.IP
.nf
\f[C]
from\ abipy.lessons.lesson_dos_bands\ import\ Lesson
lesson\ =\ Lesson()
\f[]
.fi
.RE
.PP
As always you can reread this lessons text using the command:
.RS
.IP
.nf
\f[C]
lesson
\f[]
.fi
.RE
.PP
To build the flow:
.RS
.IP
.nf
\f[C]
flow\ =\ lesson.make_flow()
\f[]
.fi
.RE
.PP
To print the input files:
.RS
.IP
.nf
\f[C]
flow.show_inputs()
\f[]
.fi
.RE
.PP
To visualize the dependencies in the flow:
.RS
.IP
.nf
\f[C]
flow.show_dependencies()
\f[]
.fi
.RE
.PP
Start the flow with the scheduler and wait for completion.
.RS
.IP
.nf
\f[C]
flow.make_scheduler().start()
\f[]
.fi
.RE
.PP
To analyze the results.
.RS
.IP
.nf
\f[C]
lesson.analyze(flow)
\f[]
.fi
.RE
.SH Exercises
.PP
At this point, you may want to interact more with the underlying python
objects so that you can start to develop your own script or your
post\-processing tool.
.PP
Our flow consists of a BandStructureWork object that provide many tools
for post\-processing.
Use
.RS
.IP
.nf
\f[C]
work\ =\ flow[0]
\f[]
.fi
.RE
.PP
to have access to the band structure work and look at the plot methods
that are available (hint: type work.plot in ipython and press TAB to get
a list of methods)
.IP "1)" 3
Use the plot methods to visualize the convergence of the DOS wrt to the
number of k\-points.
Then change the value of the gaussian broadening.
.IP "2)" 3
Plot bands and DOS on the same figure.
.PP
Rememeber that, in ipython, one can access the documentation of a method
with work.plot_edoses?
.SH Next
.PP
A logical next lesson would be lesson_g0w0
