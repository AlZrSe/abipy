#!/usr/bin/env python
"""Script for plotting band structures generated by ABINIT."""
from __future__ import print_function, division

import sys
import matplotlib.pyplot as plt

from matplotlib.gridspec import GridSpec
from abipy.electrons import ElectronBands, ElectronDOS

__version__ = "0.1"
__author__ = "Matteo Giantomassi"

###############################################################################

def plot_bands(bands):
    """
    Plot the band structure.

    :arg bands: string, file object or ElectronBands instance.
    """
    if not isinstance(bands, ElectronBands):
        bands = ElectronBands.from_file(bands)

    bands.plot()

###############################################################################

def plot_dos(dos):
    """
    Plot the DOS.

    :arg dos: string, file object or ElectronDOS instance.
    """
    if not isinstance(dos, ElectronDOS):
        dos = ElectronDOS(filobj=dos)

    dos.plot()

###############################################################################

def plot_bands_and_dos(bands, dos):
    """
    Plot the band structure and the DOS.

    :arg bands: string, file object or ElectronBands instance.
    :arg dos: string, file object or DOS instance.
    """
    if not isinstance(bands, ElectronBands):
        bands = ElectronBands.from_file(bands)

    #bands.raw_print()

    klabels = {(0.0, 0.0, 0.0): "$\Gamma$", (0.5, 0, 0): "L", (0.0, 0.5, 0.5): "X"}
    #klabels = None

    bands.plot(klabels=klabels)

    if not isinstance(dos, ElectronDOS):
        dos = ElectronDOS(filobj=dos)

    gs = GridSpec(1, 2, width_ratios=[2, 1])
    ax1 = plt.subplot(gs[0])
    ax2 = plt.subplot(gs[1])

    for ax in (ax1, ax2):
        ax.grid(True)

    ax1.set_xlabel('k-point')
    ax1.set_ylabel('Energy [eV]')

    args = []
    kwargs = {"color": "black", "linewidth": 2.0}

    for spin in range(bands.nsppol):
        for band in range(bands.mband):
            bands.plot_ax(ax1, spin, band, *args, **kwargs)

    ax2.yaxis.set_ticks_position("right")
    ax2.yaxis.set_label_position("right")

    dos.plot_ax(ax2, what=None, exchange_xy=True, *args, **kwargs)

    plt.show()

###############################################################################

def plot_driver(options):
    bands_file = options.bands_file
    dos_file = options.dos_file

    if bands_file and dos_file:
        if options.verbose:
            print("Plotting band structures and DOS.")
        plot_bands_and_dos(bands_file, dos_file)

    elif bands_file:
        plot_bands(bands_file)

    elif dos_file:
        plot_dos(dos_file)

    else:
        show_examples_and_exit(1)

###############################################################################

def show_examples_and_exit(error_code=0, err_msg=None):
    """Display the usage of the script."""
    examples = """
    Typical examples:
    \n
    Author %(__author__)s
    \n""" % globals()
    sys.stderr.write(examples)
    if err_msg:  sys.stderr.write(err_msg + "\n")
    sys.exit(error_code)


def main():
    from optparse import OptionParser

    usage = "usage: %prog [options]"
    version = "%prog " + str(__version__)
    parser = OptionParser(usage=usage, version=version)

    parser.add_option("-a", "--action", dest="action", type="string", default="plot",
                      help="action to be performed, defaults to 'plot'")

    parser.add_option("-b", "--bands", dest="bands_file", type="string",
                      help="read bands from FILE", metavar="FILE")

    parser.add_option("-d", "--dos", dest="dos_file", type="string",
                      help="read DOS from FILE", metavar="FILE")

    #parser.add_option("-g", "--gwfile", dest="gw_file", type="string",
    #                  help="GW file used to construct the scissors operator.", metavar="FILE")

    parser.add_option("-v", "--verbose", help="verbose mode",
                      action="store_true", dest="verbose")

    parser.add_option("-q", "--quiet", help="disable verbose mode",
                      action="store_false", dest="verbose")

    (options, args) = parser.parse_args()

    # One argument is required.
    #if len(args) != 1:
    #  parser.error("incorrect number of arguments.")

    children = dict()
    children["plot"] = plot_driver

    action = options.action

    if children.has_key(action):
        children[action](options)
    else:
        sys.stderr.write("Unknown value for action: " + str(action))
        show_examples_and_exit(1)

    return 0

###############################################################################

if __name__ == "__main__":
    sys.exit(main())
