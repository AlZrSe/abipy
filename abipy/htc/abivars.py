"""This module contains lookup table with the name of the ABINIT variables."""

from __future__ import print_function, division

__all__ = [
    "is_abitoken",
    "is_abivar",
    "is_abiunit",
    "has_abiop",
]

def is_abitoken(s):
    """
    True if s is one of the token supported by the ABINIT parser
    i.e. variable name or unit name.
    """
    return s in ABI_ALLTOKENS

def is_abivar(s):
    """
    True if s is an ABINIT variable. 
    """
    return s in ABI_VARNAMES

def is_abiunit(s):
    """
    True if s is one of the units supported by the ABINIT parser
    """
    return s in ABI_UNITS

def has_abiop(s):
    """True is string contains one of the operators supported by the ABINIT parser."""
    return any(op in s for op in ABI_OPS)


def extract_abivars(f90file, pretty_print=True):
    """This routine extract the variable names from src/57_iovars/chkvars.F90."""
    # !<ABINIT_VARS>
    # list_vars=                 ' accesswff accuracy acell algalch amu angdeg atvshift autoparal awtr'
    # list_vars=trim(list_vars)//' fband fermie_nest'
    # list_logicals=' SpinPolarized '
    # !</ABINIT_VARS>

    #!Extra token, also admitted :
    #!<ABINIT_UNITS>
    # list_vars=trim(list_vars)//' au Angstr Angstrom Angstroms Bohr Bohrs eV Ha'
    # list_vars=trim(list_vars)//' Hartree Hartrees K Ry Rydberg Rydbergs T Tesla'
    #!</ABINIT_UNITS>

    #!<ABINIT_OPERATORS>
    #list_vars=trim(list_vars)//' sqrt end'
    #!</ABINIT_OPERATORS>

    with open(f90file, "r") as fh:
        lines = [l.lstrip().rstrip() for l in fh]

    start = lines.index("!<ABINIT_VARS>")
    stop  = lines.index("!</ABINIT_VARS>", start)
    var_field = [l for l in lines[start+1:stop] if l and not l.startswith("!")]
    #print(var_field)

    start = lines.index("!<ABINIT_UNITS>")
    stop  = lines.index("!</ABINIT_UNITS>", start)
    unit_field = [l for l in lines[start+1:stop] if l and not l.startswith("!")]

    start = lines.index("!<ABINIT_OPERATORS>")
    stop  = lines.index("!</ABINIT_OPERATORS>", start)
    op_field = [l for l in lines[start+1:stop] if l and not l.startswith("!")]

    def extract_names(field):
        names = []
        for line in field:
            i = line.find("'")
            if i == -1: i = line.find('"')
            if i == -1:
                raise ValueError("Cannot find string in line %s" % line)

            s = line[i+1:]
            s = s.replace("'", "").replace('"', "")
            tokens = [t for t in s.split() if not t.startswith("!")]
            names.extend(tokens)

        return names

    var_names = extract_names(var_field)
    unit_names = extract_names(unit_field)
    op_names = extract_names(op_field)

    if pretty_print:
        from pprint import pprint
        print("# " + 80*"-")
        print("# Begin computer generated code")
        print()
        print("# Variable names.")
        print("ABI_VARNAMES = ", end="")
        pprint(var_names)
        print("")
        print("# Unit names.")
        print("ABI_UNITS = ", end="")
        pprint(unit_names)
        print("")
        print("# Operators.")
        print("ABI_OPS = ", end="")
        pprint(op_names + ["*", "/"])
        print("")
        print("# End computer generated code")
        print("# " + 80*"-")

    return var_names

# The variables below have been extracted from the file src/57_iovars/chkvars.F90. 
# See the function extract_abivars defined in this module.
# Tokens are divides in 3 classes: variable names, unit names, operators

# --------------------------------------------------------------------------------
# Begin computer generated code

# Variable names.
ABI_VARNAMES = ['accesswff',
 'accuracy',
 'acell',
 'algalch',
 'amu',
 'angdeg',
 'atvshift',
 'autoparal',
 'awtr',
 'bandpp',
 'bdberry',
 'bdeigrf',
 'bdgw',
 'berryopt',
 'berrysav',
 'berrystep',
 'bfield',
 'bmass',
 'boxcenter',
 'boxcutmin',
 'brvltt',
 'builtintest',
 'bs_algorithm',
 'bs_calctype',
 'bs_coulomb_term',
 'bs_coupling',
 'bs_eh_cutoff',
 'bs_exchange_term',
 'bs_freq_mesh',
 'bs_haydock_niter',
 'bs_haydock_tol',
 'bs_hayd_term',
 'bs_loband',
 'bs_nstates',
 'bxctmindg',
 'cd_customnimfrqs',
 'cd_frqim_method',
 'cd_full_grid',
 'cd_imfrqs',
 'cd_halfway_freq',
 'cd_max_freq',
 'cd_subset_freq',
 'charge',
 'chkexit',
 'chkgwcomp',
 'chkprim',
 'chksymbreak',
 'cineb_start',
 'cpus',
 'cpum',
 'cpuh',
 'ddamp',
 'delayperm',
 'densty',
 'dfield',
 'diecut',
 'diegap',
 'dielam',
 'dielng',
 'diemac',
 'diemix',
 'diemixmag',
 'diismemory',
 'dilatmx',
 'dmatpawu',
 'dmatpuopt',
 'dmatudiag',
 'dmft_dc',
 'dmft_iter',
 'dmft_mxsf',
 'dmft_nwli',
 'dmft_nwlo',
 'dmft_read_occnd',
 'dmft_rslf',
 'dmft_solv',
 'dmft_t2g',
 'dmft_tollc',
 'dmftbandi',
 'dmftbandf',
 'dmftctqmc_check',
 'dmftctqmc_correl',
 'dmftctqmc_gmove',
 'dmftctqmc_grnns',
 'dmftctqmc_meas',
 'dmftctqmc_mrka',
 'dmftctqmc_mov',
 'dmftctqmc_order',
 'dmftcheck',
 'dmftqmc_l',
 'dmftqmc_n',
 'dmftqmc_therm',
 'dosdeltae',
 'dtion',
 'dynimage',
 'ecut',
 'ecuteps',
 'ecutsigx',
 'ecutsm',
 'ecutwfn',
 'effmass',
 'efield',
 'elph2_imagden',
 'enunit',
 'eshift',
 'esmear',
 'etsfgroups',
 'etsfmain',
 'exchmix',
 'exchn2n3d',
 'fband',
 'fermie_nest',
 'fftalg',
 'fftcache',
 'fftgw',
 'fft_opt_lob',
 'freqim_alpha',
 'freqremax',
 'freqremin',
 'freqspmax',
 'freqspmin',
 'freqsusin',
 'freqsuslo',
 'friction',
 'frzfermi',
 'fxcartfactor',
 'f4of2_sla',
 'f6of2_sla',
 'ga_algor',
 'ga_fitness',
 'ga_n_rules',
 'ga_opt_percent',
 'ga_rules',
 'genafm',
 'getbscoup',
 'getbseig',
 'getbsreso',
 'getcell',
 'getddk',
 'getden',
 'getgam_eig2nkq',
 'gethaydock',
 'getkss',
 'getocc',
 'getpawden',
 'getqps',
 'getscr',
 'getwfkfine',
 'getsuscep',
 'getvel',
 'getwfk',
 'getwfq',
 'getxcart',
 'getxred',
 'get1den',
 'get1wf',
 'goprecon',
 'goprecprm',
 'gpu_linalg_limit',
 'gwcalctyp',
 'gwcomp',
 'gwencomp',
 'gwgamma',
 'gwmem',
 'gwpara',
 'gwrpacorr',
 'gw_customnfreqsp',
 'gw_eet',
 'gw_eet_inclvkb',
 'gw_eet_nband',
 'gw_eet_scale',
 'gw_frqim_inzgrid',
 'gw_frqre_inzgrid',
 'gw_frqre_tangrid',
 'gw_freqsp',
 'gw_npoles',
 'gw_nqlwl',
 'gw_nstep',
 'gw_qlwl',
 'gw_reconst_scr',
 'gw_sctype',
 'gw_sigxcore',
 'gw_toldfeig',
 'gw_use_pole_scr',
 'iatcon',
 'iatfix',
 'iatfixx',
 'iatfixy',
 'iatfixz',
 'iatsph',
 'iboxcut',
 'icoulomb',
 'icutcoul',
 'idyson',
 'ieig2rf',
 'ikhxc',
 'imgmov',
 'inclvkb',
 'intexact',
 'intxc',
 'ionmov',
 'iqpt',
 'iprcch',
 'iprcel',
 'iprcfc',
 'iprctfvw',
 'irandom',
 'irdbscoup',
 'irdbseig',
 'irdbsreso',
 'irdddk',
 'irdden',
 'irdhaydock',
 'irdkss',
 'irdpawden',
 'irdqps',
 'irdscr',
 'irdsuscep',
 'irdwfk',
 'irdwfq',
 'ird1den',
 'irdwfkfine',
 'ird1wf',
 'iscf',
 'isecur',
 'istatimg',
 'istatr',
 'istatshft',
 'istwfk',
 'ixc',
 'ixcpositron',
 'irdvdw',
 'jdtset',
 'jellslab',
 'jfielddir',
 'jpawu',
 'kberry',
 'kpt',
 'kptbounds',
 'kptgw',
 'kptnrm',
 'kptopt',
 'kptrlatt',
 'kptrlen',
 'kssform',
 'ldgapp',
 'lexexch',
 'localrdwf',
 'lpawu',
 'lotf_classic',
 'lotf_nitex',
 'lotf_nneigx',
 'lotf_version',
 'max_ncpus',
 'macro_uj',
 'maxestep',
 'maxnsym',
 'mdf_epsinf',
 'mdtemp',
 'mdwall',
 'magconon',
 'magcon_lambda',
 'mep_mxstep',
 'mep_solver',
 'mffmem',
 'mixalch',
 'mkmem',
 'mkqmem',
 'mk1mem',
 'mqgrid',
 'mqgriddg',
 'natcon',
 'natfix',
 'natfixx',
 'natfixy',
 'natfixz',
 'natom',
 'natrd',
 'natsph',
 'natsph_extra',
 'natvshift',
 'nband',
 'nbandkss',
 'nbandsus',
 'nbdblock',
 'nbdbuf',
 'nberry',
 'nconeq',
 'nctime',
 'ndivk',
 'ndivsm',
 'ndtset',
 'ndyson',
 'neb_algo',
 'neb_spring',
 'nfreqim',
 'nfreqre',
 'nfreqsp',
 'nfreqsus',
 'ngfft',
 'ngfftdg',
 'ngkpt',
 'ngqpt',
 'nimage',
 'nkpt',
 'nkptgw',
 'nline',
 'nloalg',
 'nnos',
 'nnsclo',
 'nobj',
 'nomegasf',
 'nomegasi',
 'nomegasrd',
 'noseinert',
 'npband',
 'npfft',
 'npimage',
 'npkpt',
 'nppert',
 'npsp',
 'npspinor',
 'npulayit',
 'npweps',
 'npwkss',
 'npwsigx',
 'np_slk',
 'nqpt',
 'nqptdm',
 'nscforder',
 'nsheps',
 'nshiftk',
 'nshiftq',
 'nshsigx',
 'nspden',
 'nspinor',
 'nsppol',
 'nstep',
 'nsym',
 'ntime',
 'ntimimage',
 'ntypalch',
 'ntypat',
 'nwfshist',
 'objaat',
 'objbat',
 'objaax',
 'objbax',
 'objan',
 'objbn',
 'objarf',
 'objbrf',
 'objaro',
 'objbro',
 'objatr',
 'objbtr',
 'occ',
 'occopt',
 'omegasimax',
 'omegasrdmax',
 'optcell',
 'optdriver',
 'optforces',
 'optfreqsus',
 'optnlxccc',
 'optstress',
 'orbmag',
 'ortalg',
 'paral_atom',
 'paral_kgb',
 'paral_rf',
 'pawcpxocc',
 'pawcross',
 'pawecutdg',
 'pawfatbnd',
 'pawlcutd',
 'pawlmix',
 'pawmixdg',
 'pawnhatxc',
 'pawnphi',
 'pawntheta',
 'pawnzlm',
 'pawoptmix',
 'pawovlp',
 'pawprtdos',
 'pawprtvol',
 'pawprtwf',
 'pawprt_b',
 'pawprt_k',
 'pawspnorb',
 'pawstgylm',
 'pawsushat',
 'pawujat',
 'pawujrad',
 'pawujv',
 'pawusecp',
 'pawxcdev',
 'pimass',
 'pitransform',
 'polcen',
 'positron',
 'posnstep',
 'posocc',
 'postoldfe',
 'postoldff',
 'ppmfrq',
 'ppmodel',
 'prepanl',
 'prepgkk',
 'prepscphon',
 'papiopt',
 'prtatlist',
 'prtbbb',
 'prtbltztrp',
 'prtcif',
 'prtcml',
 'prtcs',
 'prtden',
 'prtdensph',
 'prtdipole',
 'prtdos',
 'prtdosm',
 'prtefg',
 'prteig',
 'prtelf',
 'prtfc',
 'prtfsurf',
 'prtgden',
 'prtgeo',
 'prtgkk',
 'prtkden',
 'prtkpt',
 'prtlden',
 'prtnabla',
 'prtnest',
 'prtposcar',
 'prtpot',
 'prtspcur',
 'prtstm',
 'prtsuscep',
 'prtvha',
 'prtvhxc',
 'prtvol',
 'prtvxc',
 'prtwant',
 'prtwf',
 'prtxml',
 'prt1dm',
 'ptcharge',
 'prtvdw',
 'qmass',
 'qprtrb',
 'qpt',
 'qptdm',
 'qptnrm',
 'qptopt',
 'qptrlatt',
 'quadmom',
 'random_atpos',
 'ratsph',
 'ratsph_extra',
 'rcut',
 'recefermi',
 'recgratio',
 'recnpath',
 'recnrec',
 'recptrott',
 'recrcut',
 'rectesteg',
 'rectolden',
 'red_dfield',
 'red_efield',
 'red_efieldbar',
 'restartxf',
 'rfasr',
 'rfatpol',
 'rfddk',
 'rfdir',
 'rfelfd',
 'rfmeth',
 'rfphon',
 'rfstrs',
 'rfuser',
 'rf1atpol',
 'rf1dir',
 'rf1elfd',
 'rf1phon',
 'rf2atpol',
 'rf2dir',
 'rf2elfd',
 'rf2phon',
 'rf3atpol',
 'rf3dir',
 'rf3elfd',
 'rf3phon',
 'rhoqpmix',
 'rprim',
 'scalecart',
 'sciss',
 'scphon_temp',
 'scphon_supercell',
 'shiftk',
 'shiftq',
 'signperm',
 'slabwsrad',
 'slabzbeg',
 'slabzend',
 'smdelta',
 'soenergy',
 'so_psp',
 'spbroad',
 'spgaxor',
 'spgorig',
 'spgroup',
 'spgroupma',
 'spinat',
 'spinmagntarget',
 'spmeth',
 'spnorbscl',
 'stmbias',
 'strfact',
 'string_algo',
 'strprecon',
 'strtarget',
 'supercell',
 'suskxcrs',
 'symafm',
 'symchi',
 'symmorphi',
 'symrel',
 'symsigma',
 'td_maxene',
 'td_mexcit',
 'tfkinfunc',
 'timopt',
 'tl_nprccg',
 'tl_radius',
 'tnons',
 'toldfe',
 'toldff',
 'tolimg',
 'tolmxf',
 'tolrde',
 'tolrff',
 'tolsym',
 'tolvrs',
 'tolwfr',
 'tphysel',
 'tsmear',
 'typat',
 'ucrpa',
 'ucrpa_bands',
 'udtset',
 'upawu',
 'usedmatpu',
 'usedmft',
 'useexexch',
 'usekden',
 'use_nonscf_gkk',
 'usepawu',
 'usepotzero',
 'useria',
 'userib',
 'useric',
 'userid',
 'userie',
 'userra',
 'userrb',
 'userrc',
 'userrd',
 'userre',
 'usewvl',
 'usexcnhat',
 'useylm',
 'use_gpu_cuda',
 'use_slk',
 'vaclst',
 'vacnum',
 'vacuum',
 'vacwidth',
 'vcutgeo',
 'vdw_nfrag',
 'vdw_supercell',
 'vdw_tol',
 'vdw_typfrag',
 'vdw_xc',
 'vdw_df_acutmin',
 'vdw_df_aratio',
 'vdw_df_damax',
 'vdw_df_damin',
 'vdw_df_dcut',
 'vdw_df_dratio',
 'vdw_df_dsoft',
 'vdw_df_gcut',
 'vdw_df_ndpts',
 'vdw_df_ngpts',
 'vdw_df_nqpts',
 'vdw_df_nrpts',
 'vdw_df_nsmooth',
 'vdw_df_phisoft',
 'vdw_df_qcut',
 'vdw_df_qratio',
 'vdw_df_rcut',
 'vdw_df_rsoft',
 'vdw_df_threshold',
 'vdw_df_tolerance',
 'vdw_df_tweaks',
 'vdw_df_zab',
 'vel',
 'vel_cell',
 'vis',
 'vprtrb',
 'wfoptalg',
 'wtatcon',
 'wtk',
 'wvl_bigdft_comp',
 'wvl_crmult',
 'wvl_frmult',
 'wvl_hgrid',
 'wvl_ngauss',
 'wvl_nprccg',
 'w90iniprj',
 'w90prtunk',
 'xangst',
 'xcart',
 'xc_denpos',
 'xc_tb09_c',
 'xred',
 'xredsph_extra',
 'xyzfile',
 'zcut',
 'zeemanfield',
 'znucl',
 'LatticeConstant',
 'SpinPolarized',
 'cmlfile',
 'XCname']

# Unit names.
ABI_UNITS = ['au',
 'Angstr',
 'Angstrom',
 'Angstroms',
 'Bohr',
 'Bohrs',
 'eV',
 'Ha',
 'Hartree',
 'Hartrees',
 'K',
 'Ry',
 'Rydberg',
 'Rydbergs',
 'T',
 'Tesla']

# Operators.
ABI_OPS = ['sqrt', 'end', '*', '/']

# End computer generated code
# --------------------------------------------------------------------------------

# All tokens supported by the abinit parser.
ABI_ALLTOKENS = ABI_VARNAMES + ABI_OPS + ABI_UNITS 

# Build sets to speedup search.
ABI_ALLTOKENS = set(ABI_ALLTOKENS)
ABI_VARNAMES = set(ABI_VARNAMES)
ABI_OPS = set(ABI_OPS)
ABI_UNITS = set(ABI_UNITS) 


if __name__ == "__main__":
    import sys
    f90file = sys.argv[1]
    varnames = extract_abivars(f90file)
    sys.exit(0)
